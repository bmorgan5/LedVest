#ifndef GIF_BUILDER_H
#define GIF_BUILDER_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <gif_lib.h>

typedef unsigned char uint8_t;

typedef struct GifLiteral {
	GifByteType* bytes;
	int size;
	int cursor; // Points to the first unread byte (should be initialized to 0)
} GifLiteral;

GifByteType nyan_cat_bytes[] = 
{
	0x47,0x49,0x46,0x38,0x39,0x61,0x18,0x00,0x10,0x00,0xf3,0x00,0x00,0x1a,0x1a,0x1a,
	0xff,0x00,0x00,0x66,0x33,0xff,0xff,0x33,0x99,0x00,0x99,0xff,0x99,0x99,0x99,0xff,
	0x99,0x00,0xff,0x99,0x99,0xff,0x99,0xff,0x33,0xff,0x00,0xff,0xcc,0x99,0xf7,0xf7,
	0xf7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0xff,0x0b,
	0x4e,0x45,0x54,0x53,0x43,0x41,0x50,0x45,0x32,0x2e,0x30,0x03,0x01,0x00,0x00,0x00,
	0x21,0xfe,0x16,0x43,0x72,0x6f,0x70,0x70,0x65,0x64,0x20,0x77,0x69,0x74,0x68,0x20,
	0x65,0x7a,0x67,0x69,0x66,0x2e,0x63,0x6f,0x6d,0x00,0x21,0xf9,0x04,0x09,0x0a,0x00,
	0x09,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,0x04,0x6f,0x30,0xc9,
	0x49,0xab,0xbd,0x12,0xe8,0xcd,0x37,0xce,0x4a,0x28,0x2a,0xda,0x08,0x24,0x5a,0x05,
	0x84,0x48,0xeb,0x02,0x05,0xd0,0x86,0xf0,0x09,0x04,0xc1,0xaa,0xb8,0x3c,0x1c,0x6f,
	0x85,0x58,0x22,0x66,0x58,0xb9,0x06,0xbd,0xa0,0x52,0x79,0x0a,0x96,0x78,0xaf,0xe5,
	0x02,0x36,0xfd,0x39,0x77,0x50,0x84,0xcf,0x59,0xab,0x11,0x36,0x58,0x64,0x74,0x49,
	0x06,0x08,0xce,0xc6,0xac,0xef,0x70,0xa8,0xc5,0xda,0x13,0xdd,0xb1,0xb5,0x6e,0x73,
	0xe0,0x71,0x16,0x74,0x5b,0xb6,0xe8,0x46,0x34,0x1d,0x29,0x2a,0x3f,0x82,0x82,0x18,
	0x3e,0x89,0x19,0x4e,0x4e,0x1f,0x29,0x83,0x19,0x36,0x27,0x14,0x11,0x00,0x21,0xf9,
	0x04,0x09,0x0a,0x00,0x04,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,
	0x04,0x6d,0x90,0xc8,0x49,0xab,0xbd,0x12,0xe8,0xcd,0x37,0xce,0x4a,0x28,0x2a,0xda,
	0x08,0x10,0x5a,0x05,0x84,0x48,0xeb,0x02,0x05,0xd0,0x86,0xf0,0x19,0xdc,0xab,0xe2,
	0xee,0x70,0xbc,0x15,0x31,0x82,0x61,0xb8,0x72,0x0d,0x78,0xc0,0x64,0xf2,0xc4,0xd1,
	0xed,0x5a,0x3d,0xe0,0x02,0x36,0x8d,0x2d,0x9d,0xcf,0xa8,0x6f,0xdb,0x71,0x1e,0x5f,
	0xca,0x70,0x4c,0x40,0x2e,0x3e,0x11,0xbd,0xc3,0xa1,0x16,0x5b,0x4f,0x72,0x46,0x28,
	0x50,0xdd,0x71,0xbf,0x59,0x59,0x31,0xf0,0xa4,0x1a,0x99,0x3a,0x29,0x16,0x80,0x83,
	0x35,0x18,0x3d,0x87,0x19,0x7b,0x7b,0x1f,0x29,0x81,0x19,0x4c,0x7c,0x12,0x11,0x00,
	0x21,0xf9,0x04,0x09,0x0a,0x00,0x06,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,
	0x00,0x00,0x04,0x72,0xd0,0xc8,0x09,0xaa,0xbd,0x76,0x6a,0xaa,0xba,0x57,0xd5,0x07,
	0x18,0xd5,0x06,0x74,0x48,0xaa,0x02,0x05,0x90,0x76,0xec,0xc8,0x29,0x6a,0xcd,0xb6,
	0x56,0xd1,0x6a,0xa7,0x3a,0xd8,0xba,0x60,0x70,0x14,0xb0,0xd0,0x6a,0xa9,0x9b,0x6e,
	0xc1,0x62,0xe2,0x74,0x3d,0x24,0x42,0xf9,0xac,0xb4,0xa0,0xd1,0xdf,0x4a,0xc8,0xbd,
	0x02,0x12,0x51,0xe4,0xed,0x70,0x88,0xb5,0xca,0x00,0x02,0xe1,0x74,0x44,0x68,0xc7,
	0x68,0x4b,0x59,0x40,0x27,0xa1,0xc4,0x5d,0xe8,0xc6,0xfe,0xf1,0x60,0x32,0x7b,0x24,
	0x7f,0x83,0x81,0x12,0x37,0x87,0x86,0x50,0x7a,0x81,0x87,0x8b,0x8d,0x3b,0x85,0x25,
	0x25,0x14,0x23,0x93,0x12,0x11,0x00,0x21,0xf9,0x04,0x01,0x0a,0x00,0x01,0x00,0x2c,
	0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,0x04,0x70,0x30,0xc8,0x09,0xaa,0xbd,
	0x76,0x6a,0xaa,0xba,0x57,0xd5,0x07,0x04,0xd5,0x06,0x74,0x48,0xaa,0x02,0x05,0x90,
	0x76,0xec,0xc8,0x29,0x6a,0xcd,0xb6,0x56,0xd1,0x6a,0xa7,0x3a,0xd8,0xba,0x60,0x70,
	0x74,0xa1,0xd5,0x52,0x37,0xdd,0x82,0xb5,0x6c,0x0d,0x8d,0xc7,0x24,0x6e,0x8a,0x31,
	0xfe,0x56,0xc2,0x6c,0x2b,0xc1,0xed,0x1d,0x11,0xb7,0xc3,0x21,0xd6,0x1a,0x13,0xce,
	0x27,0xe8,0x35,0x3c,0xbe,0x8c,0x05,0x70,0x12,0x2a,0xaa,0xd5,0xc9,0x78,0x1f,0x11,
	0xa6,0xb4,0x21,0xed,0xff,0x7d,0x14,0x76,0x76,0x12,0x37,0x86,0x81,0x24,0x83,0x3b,
	0x89,0x4e,0x8b,0x81,0x25,0x7c,0x85,0x44,0x77,0x12,0x11,0x00,0x3b
};

struct CHSV {
    union {
		struct {
		    union {
		        uint8_t hue;
		        uint8_t h; };
		    union {
		        uint8_t saturation;
		        uint8_t sat;
		        uint8_t s; };
		    union {
		        uint8_t value;
		        uint8_t val;
		        uint8_t v; };
		};
		uint8_t raw[3];
	};
};

struct CRGB {
	union {
		struct {
            union {
                uint8_t r;
                uint8_t red;
            };
            union {
                uint8_t g;
                uint8_t green;
            };
            union {
                uint8_t b;
                uint8_t blue;
            };
        };
		uint8_t raw[3];
	};
};

uint8_t rainbow_color_map[256][3] = {
	{0xFB,0x0E,0x0E}, {0xF7,0x11,0x0E},	{0xF3,0x15,0x0E}, {0xEF,0x19,0x0E},
	{0xEC,0x1D,0x0E}, {0xE8,0x20,0x0E},	{0xE4,0x24,0x0E}, {0xE0,0x28,0x0E},
	{0xDD,0x2C,0x0E}, {0xD9,0x2F,0x0E}, {0xD5,0x33,0x0E}, {0xD1,0x37,0x0E},
	{0xCE,0x3B,0x0E}, {0xCA,0x3E,0x0E}, {0xC6,0x42,0x0E}, {0xC2,0x46,0x0E},
	{0xBE,0x4A,0x0E}, {0xBB,0x4E,0x0E}, {0xB7,0x51,0x0E}, {0xB3,0x55,0x0E},
	{0xAF,0x59,0x0E}, {0xAC,0x5D,0x0E}, {0xA8,0x60,0x0E}, {0xA4,0x64,0x0E},
	{0xA0,0x68,0x0E}, {0x9D,0x6C,0x0E}, {0x99,0x6F,0x0E}, {0x95,0x73,0x0E},
	{0x91,0x77,0x0E}, {0x8E,0x7B,0x0E}, {0x8A,0x7E,0x0E}, {0x86,0x82,0x0E},
	{0x82,0x86,0x0E}, {0x7E,0x8A,0x0E}, {0x7B,0x8E,0x0E}, {0x77,0x91,0x0E},
	{0x73,0x95,0x0E}, {0x6F,0x99,0x0E}, {0x6C,0x9D,0x0E}, {0x68,0xA0,0x0E},
	{0x64,0xA4,0x0E}, {0x60,0xA8,0x0E}, {0x5D,0xAC,0x0E}, {0x59,0xAF,0x0E},
	{0x55,0xB3,0x0E}, {0x51,0xB7,0x0E}, {0x4E,0xBB,0x0E}, {0x4A,0xBE,0x0E},
	{0x46,0xC2,0x0E}, {0x42,0xC6,0x0E}, {0x3E,0xCA,0x0E}, {0x3B,0xCE,0x0E},
	{0x37,0xD1,0x0E}, {0x33,0xD5,0x0E}, {0x2F,0xD9,0x0E}, {0x2C,0xDD,0x0E},
	{0x28,0xE0,0x0E}, {0x24,0xE4,0x0E}, {0x20,0xE8,0x0E}, {0x1D,0xEC,0x0E},
	{0x19,0xEF,0x0E}, {0x15,0xF3,0x0E}, {0x11,0xF7,0x0E}, {0x0E,0xFB,0x0E},
	{0x0E,0xFB,0x0E}, {0x0E,0xF7,0x11}, {0x0E,0xF3,0x15}, {0x0E,0xEF,0x19},
	{0x0E,0xEC,0x1D}, {0x0E,0xE8,0x20}, {0x0E,0xE4,0x24}, {0x0E,0xE0,0x28},
	{0x0E,0xDD,0x2C}, {0x0E,0xD9,0x2F}, {0x0E,0xD5,0x33}, {0x0E,0xD1,0x37},
	{0x0E,0xCE,0x3B}, {0x0E,0xCA,0x3E}, {0x0E,0xC6,0x42}, {0x0E,0xC2,0x46},
	{0x0E,0xBE,0x4A}, {0x0E,0xBB,0x4E}, {0x0E,0xB7,0x51}, {0x0E,0xB3,0x55},
	{0x0E,0xAF,0x59}, {0x0E,0xAC,0x5D}, {0x0E,0xA8,0x60}, {0x0E,0xA4,0x64},
	{0x0E,0xA0,0x68}, {0x0E,0x9D,0x6C}, {0x0E,0x99,0x6F}, {0x0E,0x95,0x73},
	{0x0E,0x91,0x77}, {0x0E,0x8E,0x7B}, {0x0E,0x8A,0x7E}, {0x0E,0x86,0x82},
	{0x0E,0x82,0x86}, {0x0E,0x7E,0x8A}, {0x0E,0x7B,0x8E}, {0x0E,0x77,0x91},
	{0x0E,0x73,0x95}, {0x0E,0x6F,0x99}, {0x0E,0x6C,0x9D}, {0x0E,0x68,0xA0},
	{0x0E,0x64,0xA4}, {0x0E,0x60,0xA8}, {0x0E,0x5D,0xAC}, {0x0E,0x59,0xAF},
	{0x0E,0x55,0xB3}, {0x0E,0x51,0xB7}, {0x0E,0x4E,0xBB}, {0x0E,0x4A,0xBE},
	{0x0E,0x46,0xC2}, {0x0E,0x42,0xC6}, {0x0E,0x3E,0xCA}, {0x0E,0x3B,0xCE},
	{0x0E,0x37,0xD1}, {0x0E,0x33,0xD5}, {0x0E,0x2F,0xD9}, {0x0E,0x2C,0xDD},
	{0x0E,0x28,0xE0}, {0x0E,0x24,0xE4}, {0x0E,0x20,0xE8}, {0x0E,0x1D,0xEC},
	{0x0E,0x19,0xEF}, {0x0E,0x15,0xF3}, {0x0E,0x11,0xF7}, {0x0E,0x0E,0xFB},
	{0x0E,0x0E,0xFB}, {0x11,0x0E,0xF7}, {0x15,0x0E,0xF3}, {0x19,0x0E,0xEF},
	{0x1D,0x0E,0xEC}, {0x20,0x0E,0xE8}, {0x24,0x0E,0xE4}, {0x28,0x0E,0xE0},
	{0x2C,0x0E,0xDD}, {0x2F,0x0E,0xD9}, {0x33,0x0E,0xD5}, {0x37,0x0E,0xD1},
	{0x3B,0x0E,0xCE}, {0x3E,0x0E,0xCA}, {0x42,0x0E,0xC6}, {0x46,0x0E,0xC2},
	{0x4A,0x0E,0xBE}, {0x4E,0x0E,0xBB}, {0x51,0x0E,0xB7}, {0x55,0x0E,0xB3},
	{0x59,0x0E,0xAF}, {0x5D,0x0E,0xAC}, {0x60,0x0E,0xA8}, {0x64,0x0E,0xA4},
	{0x68,0x0E,0xA0}, {0x6C,0x0E,0x9D}, {0x6F,0x0E,0x99}, {0x73,0x0E,0x95},
	{0x77,0x0E,0x91}, {0x7B,0x0E,0x8E}, {0x7E,0x0E,0x8A}, {0x82,0x0E,0x86},
	{0x86,0x0E,0x82}, {0x8A,0x0E,0x7E}, {0x8E,0x0E,0x7B}, {0x91,0x0E,0x77},
	{0x95,0x0E,0x73}, {0x99,0x0E,0x6F}, {0x9D,0x0E,0x6C}, {0xA0,0x0E,0x68},
	{0xA4,0x0E,0x64}, {0xA8,0x0E,0x60}, {0xAC,0x0E,0x5D}, {0xAF,0x0E,0x59},
	{0xB3,0x0E,0x55}, {0xB7,0x0E,0x51}, {0xBB,0x0E,0x4E}, {0xBE,0x0E,0x4A},
	{0xC2,0x0E,0x46}, {0xC6,0x0E,0x42}, {0xCA,0x0E,0x3E}, {0xCE,0x0E,0x3B},
	{0xD1,0x0E,0x37}, {0xD5,0x0E,0x33}, {0xD9,0x0E,0x2F}, {0xDD,0x0E,0x2C},
	{0xE0,0x0E,0x28}, {0xE4,0x0E,0x24}, {0xE8,0x0E,0x20}, {0xEC,0x0E,0x1D},
	{0xEF,0x0E,0x19}, {0xF3,0x0E,0x15}, {0xF7,0x0E,0x11}, {0xFB,0x0E,0x0E},
	{0x0E,0x0E,0xFB}, {0x11,0x0E,0xF7}, {0x15,0x0E,0xF3}, {0x19,0x0E,0xEF},
	{0x1D,0x0E,0xEC}, {0x20,0x0E,0xE8}, {0x24,0x0E,0xE4}, {0x28,0x0E,0xE0},
	{0x2C,0x0E,0xDD}, {0x2F,0x0E,0xD9}, {0x33,0x0E,0xD5}, {0x37,0x0E,0xD1},
	{0x3B,0x0E,0xCE}, {0x3E,0x0E,0xCA}, {0x42,0x0E,0xC6}, {0x46,0x0E,0xC2},
	{0x4A,0x0E,0xBE}, {0x4E,0x0E,0xBB}, {0x51,0x0E,0xB7}, {0x55,0x0E,0xB3},
	{0x59,0x0E,0xAF}, {0x5D,0x0E,0xAC}, {0x60,0x0E,0xA8}, {0x64,0x0E,0xA4},
	{0x68,0x0E,0xA0}, {0x6C,0x0E,0x9D}, {0x6F,0x0E,0x99}, {0x73,0x0E,0x95},
	{0x77,0x0E,0x91}, {0x7B,0x0E,0x8E}, {0x7E,0x0E,0x8A}, {0x82,0x0E,0x86},
	{0x86,0x0E,0x82}, {0x8A,0x0E,0x7E}, {0x8E,0x0E,0x7B}, {0x91,0x0E,0x77},
	{0x95,0x0E,0x73}, {0x99,0x0E,0x6F}, {0x9D,0x0E,0x6C}, {0xA0,0x0E,0x68},
	{0xA4,0x0E,0x64}, {0xA8,0x0E,0x60}, {0xAC,0x0E,0x5D}, {0xAF,0x0E,0x59},
	{0xB3,0x0E,0x55}, {0xB7,0x0E,0x51}, {0xBB,0x0E,0x4E}, {0xBE,0x0E,0x4A},
	{0xC2,0x0E,0x46}, {0xC6,0x0E,0x42}, {0xCA,0x0E,0x3E}, {0xCE,0x0E,0x3B},
	{0xD1,0x0E,0x37}, {0xD5,0x0E,0x33}, {0xD9,0x0E,0x2F}, {0xDD,0x0E,0x2C},
	{0xE0,0x0E,0x28}, {0xE4,0x0E,0x24}, {0xE8,0x0E,0x20}, {0xEC,0x0E,0x1D},
	{0xEF,0x0E,0x19}, {0xF3,0x0E,0x15}, {0xF7,0x0E,0x11}, {0xFB,0x0E,0x0E}
};

/// Predefined RGB colors
typedef enum {
	AliceBlue=0xF0F8FF,
	Amethyst=0x9966CC,
	AntiqueWhite=0xFAEBD7,
	Aqua=0x00FFFF,
	Aquamarine=0x7FFFD4,
	Azure=0xF0FFFF,
	Beige=0xF5F5DC,
	Bisque=0xFFE4C4,
	Black=0x000000,
	BlanchedAlmond=0xFFEBCD,
	Blue=0x0000FF,
	BlueViolet=0x8A2BE2,
	Brown=0xA52A2A,
	BurlyWood=0xDEB887,
	CadetBlue=0x5F9EA0,
	Chartreuse=0x7FFF00,
	Chocolate=0xD2691E,
	Coral=0xFF7F50,
	CornflowerBlue=0x6495ED,
	Cornsilk=0xFFF8DC,
	Crimson=0xDC143C,
	Cyan=0x00FFFF,
	DarkBlue=0x00008B,
	DarkCyan=0x008B8B,
	DarkGoldenrod=0xB8860B,
	DarkGray=0xA9A9A9,
	DarkGrey=0xA9A9A9,
	DarkGreen=0x006400,
	DarkKhaki=0xBDB76B,
	DarkMagenta=0x8B008B,
	DarkOliveGreen=0x556B2F,
	DarkOrange=0xFF8C00,
	DarkOrchid=0x9932CC,
	DarkRed=0x8B0000,
	DarkSalmon=0xE9967A,
	DarkSeaGreen=0x8FBC8F,
	DarkSlateBlue=0x483D8B,
	DarkSlateGray=0x2F4F4F,
	DarkSlateGrey=0x2F4F4F,
	DarkTurquoise=0x00CED1,
	DarkViolet=0x9400D3,
	DeepPink=0xFF1493,
	DeepSkyBlue=0x00BFFF,
	DimGray=0x696969,
	DimGrey=0x696969,
	DodgerBlue=0x1E90FF,
	FireBrick=0xB22222,
	FloralWhite=0xFFFAF0,
	ForestGreen=0x228B22,
	Fuchsia=0xFF00FF,
	Gainsboro=0xDCDCDC,
	GhostWhite=0xF8F8FF,
	Gold=0xFFD700,
	Goldenrod=0xDAA520,
	Gray=0x808080,
	Grey=0x808080,
	Green=0x008000,
	GreenYellow=0xADFF2F,
	Honeydew=0xF0FFF0,
	HotPink=0xFF69B4,
	IndianRed=0xCD5C5C,
	Indigo=0x4B0082,
	Ivory=0xFFFFF0,
	Khaki=0xF0E68C,
	Lavender=0xE6E6FA,
	LavenderBlush=0xFFF0F5,
	LawnGreen=0x7CFC00,
	LemonChiffon=0xFFFACD,
	LightBlue=0xADD8E6,
	LightCoral=0xF08080,
	LightCyan=0xE0FFFF,
	LightGoldenrodYellow=0xFAFAD2,
	LightGreen=0x90EE90,
	LightGrey=0xD3D3D3,
	LightPink=0xFFB6C1,
	LightSalmon=0xFFA07A,
	LightSeaGreen=0x20B2AA,
	LightSkyBlue=0x87CEFA,
	LightSlateGray=0x778899,
	LightSlateGrey=0x778899,
	LightSteelBlue=0xB0C4DE,
	LightYellow=0xFFFFE0,
	Lime=0x00FF00,
	LimeGreen=0x32CD32,
	Linen=0xFAF0E6,
	Magenta=0xFF00FF,
	Maroon=0x800000,
	MediumAquamarine=0x66CDAA,
	MediumBlue=0x0000CD,
	MediumOrchid=0xBA55D3,
	MediumPurple=0x9370DB,
	MediumSeaGreen=0x3CB371,
	MediumSlateBlue=0x7B68EE,
	MediumSpringGreen=0x00FA9A,
	MediumTurquoise=0x48D1CC,
	MediumVioletRed=0xC71585,
	MidnightBlue=0x191970,
	MintCream=0xF5FFFA,
	MistyRose=0xFFE4E1,
	Moccasin=0xFFE4B5,
	NavajoWhite=0xFFDEAD,
	Navy=0x000080,
	OldLace=0xFDF5E6,
	Olive=0x808000,
	OliveDrab=0x6B8E23,
	Orange=0xFFA500,
	OrangeRed=0xFF4500,
	Orchid=0xDA70D6,
	PaleGoldenrod=0xEEE8AA,
	PaleGreen=0x98FB98,
	PaleTurquoise=0xAFEEEE,
	PaleVioletRed=0xDB7093,
	PapayaWhip=0xFFEFD5,
	PeachPuff=0xFFDAB9,
	Peru=0xCD853F,
	Pink=0xFFC0CB,
	Plaid=0xCC5533,
	Plum=0xDDA0DD,
	PowderBlue=0xB0E0E6,
	Purple=0x800080,
	Red=0xFF0000,
	RosyBrown=0xBC8F8F,
	RoyalBlue=0x4169E1,
	SaddleBrown=0x8B4513,
	Salmon=0xFA8072,
	SandyBrown=0xF4A460,
	SeaGreen=0x2E8B57,
	Seashell=0xFFF5EE,
	Sienna=0xA0522D,
	Silver=0xC0C0C0,
	SkyBlue=0x87CEEB,
	SlateBlue=0x6A5ACD,
	SlateGray=0x708090,
	SlateGrey=0x708090,
	Snow=0xFFFAFA,
	SpringGreen=0x00FF7F,
	SteelBlue=0x4682B4,
	Tan=0xD2B48C,
	Teal=0x008080,
	Thistle=0xD8BFD8,
	Tomato=0xFF6347,
	Turquoise=0x40E0D0,
	Violet=0xEE82EE,
	Wheat=0xF5DEB3,
	White=0xFFFFFF,
	WhiteSmoke=0xF5F5F5,
	Yellow=0xFFFF00,
	YellowGreen=0x9ACD32,

	// LED RGB color that roughly approximates
	// the color of incandescent fairy lights,
	// assuming that you're using FastLED
	// color correction on your LEDs (recommended).
	FairyLight=0xFFE42D,
}HTMLColorCode;

/*****************************************************************************
 Return a string description of  the last GIF error
*****************************************************************************/
const char* GifErrorString(int ErrorCode)
{
    const char *Err;

    switch (ErrorCode) {
      case E_GIF_ERR_OPEN_FAILED:
        Err = "Failed to open given file";
        break;
      case E_GIF_ERR_WRITE_FAILED:
        Err = "Failed to write to given file";
        break;
      case E_GIF_ERR_HAS_SCRN_DSCR:
        Err = "Screen descriptor has already been set";
        break;
      case E_GIF_ERR_HAS_IMAG_DSCR:
        Err = "Image descriptor is still active";
        break;
      case E_GIF_ERR_NO_COLOR_MAP:
        Err = "Neither global nor local color map";
        break;
      case E_GIF_ERR_DATA_TOO_BIG:
        Err = "Number of pixels bigger than width * height";
        break;
      case E_GIF_ERR_NOT_ENOUGH_MEM:
        Err = "Failed to allocate required memory";
        break;
      case E_GIF_ERR_DISK_IS_FULL:
        Err = "Write failed (disk full?)";
        break;
      case E_GIF_ERR_CLOSE_FAILED:
        Err = "Failed to close given file";
        break;
      case E_GIF_ERR_NOT_WRITEABLE:
        Err = "Given file was not opened for write";
        break;
      case D_GIF_ERR_OPEN_FAILED:
        Err = "Failed to open given file";
        break;
      case D_GIF_ERR_READ_FAILED:
        Err = "Failed to read from given file";
        break;
      case D_GIF_ERR_NOT_GIF_FILE:
        Err = "Data is not in GIF format";
        break;
      case D_GIF_ERR_NO_SCRN_DSCR:
        Err = "No screen descriptor detected";
        break;
      case D_GIF_ERR_NO_IMAG_DSCR:
        Err = "No Image Descriptor detected";
        break;
      case D_GIF_ERR_NO_COLOR_MAP:
        Err = "Neither global nor local color map";
        break;
      case D_GIF_ERR_WRONG_RECORD:
        Err = "Wrong record type detected";
        break;
      case D_GIF_ERR_DATA_TOO_BIG:
        Err = "Number of pixels bigger than width * height";
        break;
      case D_GIF_ERR_NOT_ENOUGH_MEM:
        Err = "Failed to allocate required memory";
        break;
      case D_GIF_ERR_CLOSE_FAILED:
        Err = "Failed to close given file";
        break;
      case D_GIF_ERR_NOT_READABLE:
        Err = "Given file was not opened for read";
        break;
      case D_GIF_ERR_IMAGE_DEFECT:
        Err = "Image is defective, decoding aborted";
        break;
      case D_GIF_ERR_EOF_TOO_SOON:
        Err = "Image EOF detected before image complete";
        break;
      default:
        Err = NULL;
        break;
    }
    return Err;
}


void PrintGifError(int ErrorCode) {
    const char *Err = GifErrorString(ErrorCode);

    if (Err != NULL)
        fprintf(stderr, "GIF-LIB error: %s.\n", Err);
    else
        fprintf(stderr, "GIF-LIB undefined error %d.\n", ErrorCode);
}

#endif /* GIF_BUILDER_H */