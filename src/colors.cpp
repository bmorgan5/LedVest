#include "vest.h"

extern CRGB leds[NUM_LEDS];

uint8_t rainbow_colors[256][3] = {
	{0xE2, 0x00, 0x00}, 
	{0xE0, 0x01, 0x00},
	{0xDD, 0x04, 0x00},
	{0xDB, 0x07, 0x00},
	{0xD9, 0x08, 0x00},
	{0xD6, 0x0B, 0x00},
	{0xD3, 0x0E, 0x00},
	{0xD2, 0x0F, 0x00},
	{0xCF, 0x12, 0x00},
	{0xCC, 0x15, 0x00},
	{0xCB, 0x17, 0x00},
	{0xC8, 0x19, 0x00},
	{0xC5, 0x1C, 0x00},
	{0xC3, 0x1E, 0x00},
	{0xC1, 0x20, 0x00},
	{0xBE, 0x23, 0x00},
	{0xBB, 0x26, 0x00},
	{0xBA, 0x27, 0x00},
	{0xB7, 0x2A, 0x00},
	{0xB4, 0x2D, 0x00},
	{0xB3, 0x2E, 0x00},
	{0xB0, 0x31, 0x00},
	{0xAD, 0x34, 0x00},
	{0xAC, 0x36, 0x00},
	{0xA9, 0x38, 0x00},
	{0xA6, 0x3B, 0x00},
	{0xA4, 0x3D, 0x00},
	{0xA2, 0x3F, 0x00},
	{0x9F, 0x42, 0x00},
	{0x9D, 0x44, 0x00},
	{0x9B, 0x46, 0x00},
	{0x98, 0x49, 0x00},
	{0x97, 0x4B, 0x00},
	{0x97, 0x4D, 0x00},
	{0x97, 0x4F, 0x00},
	{0x97, 0x52, 0x00},
	{0x97, 0x54, 0x00},
	{0x97, 0x56, 0x00},
	{0x97, 0x59, 0x00},
	{0x97, 0x5B, 0x00},
	{0x97, 0x5D, 0x00},
	{0x97, 0x60, 0x00},
	{0x97, 0x62, 0x00},
	{0x97, 0x65, 0x00},
	{0x97, 0x67, 0x00},
	{0x97, 0x69, 0x00},
	{0x97, 0x6C, 0x00},
	{0x97, 0x6E, 0x00},
	{0x97, 0x71, 0x00},
	{0x97, 0x73, 0x00},
	{0x97, 0x75, 0x00},
	{0x97, 0x78, 0x00},
	{0x97, 0x7A, 0x00},
	{0x97, 0x7D, 0x00},
	{0x97, 0x7F, 0x00},
	{0x97, 0x81, 0x00},
	{0x97, 0x84, 0x00},
	{0x97, 0x86, 0x00},
	{0x97, 0x88, 0x00},
	{0x97, 0x8B, 0x00},
	{0x97, 0x8D, 0x00},
	{0x97, 0x8F, 0x00},
	{0x97, 0x92, 0x00},
	{0x97, 0x94, 0x00},
	{0x97, 0x96, 0x00},
	{0x93, 0x98, 0x00},
	{0x8E, 0x9B, 0x00},
	{0x89, 0x9D, 0x00},
	{0x85, 0x9F, 0x00},
	{0x80, 0xA2, 0x00},
	{0x7B, 0xA4, 0x00},
	{0x76, 0xA6, 0x00},
	{0x72, 0xA9, 0x00},
	{0x6D, 0xAC, 0x00},
	{0x68, 0xAD, 0x00},
	{0x64, 0xB0, 0x00},
	{0x5E, 0xB3, 0x00},
	{0x5A, 0xB4, 0x00},
	{0x56, 0xB7, 0x00},
	{0x50, 0xBA, 0x00},
	{0x4C, 0xBC, 0x00},
	{0x47, 0xBE, 0x00},
	{0x42, 0xC1, 0x00},
	{0x3E, 0xC3, 0x00},
	{0x39, 0xC5, 0x00},
	{0x34, 0xC8, 0x00},
	{0x2F, 0xCB, 0x00},
	{0x2B, 0xCC, 0x00},
	{0x26, 0xCF, 0x00},
	{0x21, 0xD2, 0x00},
	{0x1D, 0xD3, 0x00},
	{0x17, 0xD6, 0x00},
	{0x13, 0xD9, 0x00},
	{0x0F, 0xDB, 0x00},
	{0x09, 0xDD, 0x00},
	{0x05, 0xE0, 0x00},
	{0x00, 0xE2, 0x00},
	{0x00, 0xE0, 0x01},
	{0x00, 0xDD, 0x04},
	{0x00, 0xDB, 0x07},
	{0x00, 0xD9, 0x08},
	{0x00, 0xD6, 0x0B},
	{0x00, 0xD3, 0x0E},
	{0x00, 0xD2, 0x0F},
	{0x00, 0xCF, 0x12},
	{0x00, 0xCC, 0x15},
	{0x00, 0xCB, 0x17},
	{0x00, 0xC8, 0x19},
	{0x00, 0xC5, 0x1C},
	{0x00, 0xC3, 0x1E},
	{0x00, 0xC1, 0x20},
	{0x00, 0xBE, 0x23},
	{0x00, 0xBB, 0x26},
	{0x00, 0xBA, 0x27},
	{0x00, 0xB7, 0x2A},
	{0x00, 0xB4, 0x2D},
	{0x00, 0xB3, 0x2E},
	{0x00, 0xB0, 0x31},
	{0x00, 0xAD, 0x34},
	{0x00, 0xAC, 0x36},
	{0x00, 0xA9, 0x38},
	{0x00, 0xA6, 0x3B},
	{0x00, 0xA4, 0x3D},
	{0x00, 0xA2, 0x3F},
	{0x00, 0x9F, 0x42},
	{0x00, 0x9D, 0x44},
	{0x00, 0x9B, 0x46},
	{0x00, 0x98, 0x49},
	{0x00, 0x97, 0x4B},
	{0x00, 0x93, 0x4F},
	{0x00, 0x8E, 0x54},
	{0x00, 0x89, 0x59},
	{0x00, 0x85, 0x5D},
	{0x00, 0x80, 0x62},
	{0x00, 0x7B, 0x67},
	{0x00, 0x76, 0x6C},
	{0x00, 0x72, 0x70},
	{0x00, 0x6D, 0x75},
	{0x00, 0x68, 0x7A},
	{0x00, 0x64, 0x7E},
	{0x00, 0x5E, 0x84},
	{0x00, 0x5A, 0x88},
	{0x00, 0x56, 0x8C},
	{0x00, 0x50, 0x92},
	{0x00, 0x4C, 0x96},
	{0x00, 0x47, 0x9B},
	{0x00, 0x42, 0xA0},
	{0x00, 0x3E, 0xA4},
	{0x00, 0x39, 0xA9},
	{0x00, 0x34, 0xAE},
	{0x00, 0x2F, 0xB3},
	{0x00, 0x2B, 0xB7},
	{0x00, 0x26, 0xBC},
	{0x00, 0x21, 0xC1},
	{0x00, 0x1D, 0xC5},
	{0x00, 0x17, 0xCB},
	{0x00, 0x13, 0xCF},
	{0x00, 0x0F, 0xD3},
	{0x00, 0x09, 0xD9},
	{0x00, 0x05, 0xDD},
	{0x00, 0x00, 0xE2},
	{0x01, 0x00, 0xE0},
	{0x04, 0x00, 0xDD},
	{0x07, 0x00, 0xDB},
	{0x08, 0x00, 0xD9},
	{0x0B, 0x00, 0xD6},
	{0x0E, 0x00, 0xD3},
	{0x0F, 0x00, 0xD2},
	{0x12, 0x00, 0xCF},
	{0x15, 0x00, 0xCC},
	{0x17, 0x00, 0xCB},
	{0x19, 0x00, 0xC8},
	{0x1C, 0x00, 0xC5},
	{0x1E, 0x00, 0xC3},
	{0x20, 0x00, 0xC1},
	{0x23, 0x00, 0xBE},
	{0x26, 0x00, 0xBB},
	{0x27, 0x00, 0xBA},
	{0x2A, 0x00, 0xB7},
	{0x2D, 0x00, 0xB4},
	{0x2E, 0x00, 0xB3},
	{0x31, 0x00, 0xB0},
	{0x34, 0x00, 0xAD},
	{0x36, 0x00, 0xAC},
	{0x38, 0x00, 0xA9},
	{0x3B, 0x00, 0xA6},
	{0x3D, 0x00, 0xA4},
	{0x3F, 0x00, 0xA2},
	{0x42, 0x00, 0x9F},
	{0x44, 0x00, 0x9D},
	{0x46, 0x00, 0x9B},
	{0x49, 0x00, 0x98},
	{0x4B, 0x00, 0x97},
	{0x4D, 0x00, 0x95},
	{0x4F, 0x00, 0x93},
	{0x52, 0x00, 0x90},
	{0x54, 0x00, 0x8E},
	{0x56, 0x00, 0x8C},
	{0x59, 0x00, 0x89},
	{0x5B, 0x00, 0x87},
	{0x5D, 0x00, 0x85},
	{0x60, 0x00, 0x82},
	{0x62, 0x00, 0x80},
	{0x65, 0x00, 0x7D},
	{0x67, 0x00, 0x7B},
	{0x69, 0x00, 0x79},
	{0x6C, 0x00, 0x76},
	{0x6E, 0x00, 0x74},
	{0x71, 0x00, 0x71},
	{0x73, 0x00, 0x6F},
	{0x75, 0x00, 0x6D},
	{0x78, 0x00, 0x6A},
	{0x7A, 0x00, 0x68},
	{0x7D, 0x00, 0x65},
	{0x7F, 0x00, 0x63},
	{0x81, 0x00, 0x61},
	{0x84, 0x00, 0x5E},
	{0x86, 0x00, 0x5C},
	{0x88, 0x00, 0x5A},
	{0x8B, 0x00, 0x57},
	{0x8D, 0x00, 0x55},
	{0x8F, 0x00, 0x53},
	{0x92, 0x00, 0x50},
	{0x94, 0x00, 0x4E},
	{0x96, 0x00, 0x4B},
	{0x98, 0x00, 0x49},
	{0x9B, 0x00, 0x46},
	{0x9D, 0x00, 0x44},
	{0x9F, 0x00, 0x42},
	{0xA2, 0x00, 0x3F},
	{0xA4, 0x00, 0x3D},
	{0xA6, 0x00, 0x3B},
	{0xA9, 0x00, 0x38},
	{0xAC, 0x00, 0x36},
	{0xAD, 0x00, 0x34},
	{0xB0, 0x00, 0x31},
	{0xB3, 0x00, 0x2E},
	{0xB4, 0x00, 0x2D},
	{0xB7, 0x00, 0x2A},
	{0xBA, 0x00, 0x27},
	{0xBC, 0x00, 0x25},
	{0xBE, 0x00, 0x23},
	{0xC1, 0x00, 0x20},
	{0xC3, 0x00, 0x1E},
	{0xC5, 0x00, 0x1C},
	{0xC8, 0x00, 0x19},
	{0xCB, 0x00, 0x17},
	{0xCC, 0x00, 0x15},
	{0xCF, 0x00, 0x12},
	{0xD2, 0x00, 0x0F},
	{0xD3, 0x00, 0x0E},
	{0xD6, 0x00, 0x0B},
	{0xD9, 0x00, 0x08},
	{0xDB, 0x00, 0x07},
	{0xFF, 0xFF, 0xFF},
	{0x00, 0x00, 0x00}
};

uint8_t riley_rainbow[256][3] = {
    { 255, 0  , 0   },
    { 253, 2  , 0   },
    { 250, 5  , 0   },
    { 248, 7  , 0   },
    { 245, 10 , 0   },
    { 242, 13 , 0   },
    { 240, 15 , 0   },
    { 237, 18 , 0   },
    { 234, 21 , 0   },
    { 232, 23 , 0   },
    { 229, 26 , 0   },
    { 226, 29 , 0   },
    { 224, 31 , 0   },
    { 221, 34 , 0   },
    { 218, 37 , 0   },
    { 216, 39 , 0   },
    { 213, 42 , 0   },
    { 210, 45 , 0   },
    { 208, 47 , 0   },
    { 205, 50 , 0   },
    { 202, 53 , 0   },
    { 200, 55 , 0   },
    { 197, 58 , 0   },
    { 194, 61 , 0   },
    { 192, 63 , 0   },
    { 189, 66 , 0   },
    { 186, 69 , 0   },
    { 184, 71 , 0   },
    { 181, 74 , 0   },
    { 178, 77 , 0   },
    { 176, 79 , 0   },
    { 173, 82 , 0   },
    { 171, 85 , 0   },
    { 171, 87 , 0   },
    { 171, 90 , 0   },
    { 171, 92 , 0   },
    { 171, 95 , 0   },
    { 171, 98 , 0   },
    { 171, 100, 0   },
    { 171, 103, 0   },
    { 171, 106, 0   },
    { 171, 108, 0   },
    { 171, 111, 0   },
    { 171, 114, 0   },
    { 171, 116, 0   },
    { 171, 119, 0   },
    { 171, 122, 0   },
    { 171, 124, 0   },
    { 171, 127, 0   },
    { 171, 130, 0   },
    { 171, 132, 0   },
    { 171, 135, 0   },
    { 171, 138, 0   },
    { 171, 140, 0   },
    { 171, 143, 0   },
    { 171, 146, 0   },
    { 171, 148, 0   },
    { 171, 151, 0   },
    { 171, 154, 0   },
    { 171, 156, 0   },
    { 171, 159, 0   },
    { 171, 162, 0   },
    { 171, 164, 0   },
    { 171, 167, 0   },
    { 171, 171, 0   },
    { 166, 173, 0   },
    { 161, 176, 0   },
    { 156, 178, 0   },
    { 150, 181, 0   },
    { 145, 184, 0   },
    { 140, 186, 0   },
    { 134, 189, 0   },
    { 129, 192, 0   },
    { 124, 194, 0   },
    { 118, 197, 0   },
    { 113, 200, 0   },
    { 108, 202, 0   },
    { 102, 205, 0   },
    { 97 , 208, 0   },
    { 92 , 210, 0   },
    { 86 , 213, 0   },
    { 81 , 216, 0   },
    { 76 , 218, 0   },
    { 71 , 221, 0   },
    { 65 , 224, 0   },
    { 60 , 226, 0   },
    { 55 , 229, 0   },
    { 49 , 232, 0   },
    { 44 , 234, 0   },
    { 39 , 237, 0   },
    { 33 , 240, 0   },
    { 28 , 242, 0   },
    { 23 , 245, 0   },
    { 17 , 248, 0   },
    { 12 , 250, 0   },
    { 7  , 253, 0   },
    { 0  , 255, 0   },
    { 0  , 253, 2   },
    { 0  , 250, 5   },
    { 0  , 248, 7   },
    { 0  , 245, 10  },
    { 0  , 242, 13  },
    { 0  , 240, 15  },
    { 0  , 237, 18  },
    { 0  , 234, 21  },
    { 0  , 232, 23  },
    { 0  , 229, 26  },
    { 0  , 226, 29  },
    { 0  , 224, 31  },
    { 0  , 221, 34  },
    { 0  , 218, 37  },
    { 0  , 216, 39  },
    { 0  , 213, 42  },
    { 0  , 210, 45  },
    { 0  , 208, 47  },
    { 0  , 205, 50  },
    { 0  , 202, 53  },
    { 0  , 200, 55  },
    { 0  , 197, 58  },
    { 0  , 194, 61  },
    { 0  , 192, 63  },
    { 0  , 189, 66  },
    { 0  , 186, 69  },
    { 0  , 184, 71  },
    { 0  , 181, 74  },
    { 0  , 178, 77  },
    { 0  , 176, 79  },
    { 0  , 173, 82  },
    { 0  , 171, 85  },
    { 0  , 166, 90  },
    { 0  , 161, 95  },
    { 0  , 156, 100 },
    { 0  , 150, 106 },
    { 0  , 145, 111 },
    { 0  , 140, 116 },
    { 0  , 134, 122 },
    { 0  , 129, 127 },
    { 0  , 124, 132 },
    { 0  , 118, 138 },
    { 0  , 113, 143 },
    { 0  , 108, 148 },
    { 0  , 102, 154 },
    { 0  , 97 , 159 },
    { 0  , 92 , 164 },
    { 0  , 86 , 170 },
    { 0  , 81 , 175 },
    { 0  , 76 , 180 },
    { 0  , 71 , 185 },
    { 0  , 65 , 191 },
    { 0  , 60 , 196 },
    { 0  , 55 , 201 },
    { 0  , 49 , 207 },
    { 0  , 44 , 212 },
    { 0  , 39 , 217 },
    { 0  , 33 , 223 },
    { 0  , 28 , 228 },
    { 0  , 23 , 233 },
    { 0  , 17 , 239 },
    { 0  , 12 , 244 },
    { 0  , 7  , 249 },
    { 0  , 0  , 255 },
    { 2  , 0  , 253 },
    { 5  , 0  , 250 },
    { 7  , 0  , 248 },
    { 10 , 0  , 245 },
    { 13 , 0  , 242 },
    { 15 , 0  , 240 },
    { 18 , 0  , 237 },
    { 21 , 0  , 234 },
    { 23 , 0  , 232 },
    { 26 , 0  , 229 },
    { 29 , 0  , 226 },
    { 31 , 0  , 224 },
    { 34 , 0  , 221 },
    { 37 , 0  , 218 },
    { 39 , 0  , 216 },
    { 42 , 0  , 213 },
    { 45 , 0  , 210 },
    { 47 , 0  , 208 },
    { 50 , 0  , 205 },
    { 53 , 0  , 202 },
    { 55 , 0  , 200 },
    { 58 , 0  , 197 },
    { 61 , 0  , 194 },
    { 63 , 0  , 192 },
    { 66 , 0  , 189 },
    { 69 , 0  , 186 },
    { 71 , 0  , 184 },
    { 74 , 0  , 181 },
    { 77 , 0  , 178 },
    { 79 , 0  , 176 },
    { 82 , 0  , 173 },
    { 85 , 0  , 171 },
    { 87 , 0  , 169 },
    { 90 , 0  , 166 },
    { 92 , 0  , 164 },
    { 95 , 0  , 161 },
    { 98 , 0  , 158 },
    { 100, 0  , 156 },
    { 103, 0  , 153 },
    { 106, 0  , 150 },
    { 108, 0  , 148 },
    { 111, 0  , 145 },
    { 114, 0  , 142 },
    { 116, 0  , 140 },
    { 119, 0  , 137 },
    { 122, 0  , 134 },
    { 124, 0  , 132 },
    { 127, 0  , 129 },
    { 130, 0  , 126 },
    { 132, 0  , 124 },
    { 135, 0  , 121 },
    { 138, 0  , 118 },
    { 140, 0  , 116 },
    { 143, 0  , 113 },
    { 146, 0  , 110 },
    { 148, 0  , 108 },
    { 151, 0  , 105 },
    { 154, 0  , 102 },
    { 156, 0  , 100 },
    { 159, 0  , 97  },
    { 162, 0  , 94  },
    { 164, 0  , 92  },
    { 167, 0  , 89  },
    { 171, 0  , 85  },
    { 173, 0  , 83  },
    { 176, 0  , 80  },
    { 178, 0  , 78  },
    { 181, 0  , 75  },
    { 184, 0  , 72  },
    { 186, 0  , 70  },
    { 189, 0  , 67  },
    { 192, 0  , 64  },
    { 194, 0  , 62  },
    { 197, 0  , 59  },
    { 200, 0  , 56  },
    { 202, 0  , 54  },
    { 205, 0  , 51  },
    { 208, 0  , 48  },
    { 210, 0  , 46  },
    { 213, 0  , 43  },
    { 216, 0  , 40  },
    { 218, 0  , 38  },
    { 221, 0  , 35  },
    { 224, 0  , 32  },
    { 226, 0  , 30  },
    { 229, 0  , 27  },
    { 232, 0  , 24  },
    { 234, 0  , 22  },
    { 237, 0  , 19  },
    { 240, 0  , 16  },
    { 242, 0  , 14  },
    { 245, 0  , 11  },
    { 248, 0  , 8   },
    { 250, 0  , 6   },
    { 253, 0  , 3   },
};

static void show_rgb(){
	for(uint8_t j = 0; j < 8; j++){
		for(uint8_t i = 0; i < WIDTH; i++){
			leds[XY(i,j)] = CRGB::Red;
		}	
	}

	for(uint8_t j = 8; j < 16; j++){
		for(uint8_t i = 0; i < WIDTH; i++){
			leds[XY(i,j)] = CRGB::Green;
		}	
	}

	for(uint8_t j = 16; j < HEIGHT; j++){
		for(uint8_t i = 0; i < WIDTH; i++){
			leds[XY(i,j)] = CRGB::Blue;
		}	
	}
}

static void add_sparkles() {
	for(uint8_t i = 0; i < 30; i++){
		uint16_t index = XY(random16(WIDTH), random16(HEIGHT));

		if(leds[index] == CRGB(0,0,0)) {
			leds[index] = CRGB::White;
		}
	}
}

void test_rainbow_palette(){

	for(uint16_t i = 0; i < 256; i++)
	{
		leds[R(i)].r = rainbow_colors[i][0];
		leds[R(i)].g = rainbow_colors[i][1];
		leds[R(i)].b = rainbow_colors[i][2];
	}


	for(uint16_t i = 0; i < 256; i++)
	{
		leds[R(i+(WIDTH * 12))].r = riley_rainbow[i][0];
		leds[R(i+(WIDTH * 12))].g = riley_rainbow[i][1];
		leds[R(i+(WIDTH * 12))].b = riley_rainbow[i][2];
	}

	// CHSV hsv = CHSV{.h = 0, .v = 255, .s = 240};
	// for(uint16_t i = 0; i < 256; i++)
	// {	

	// 	uint8_t x = i % WIDTH;
	// 	uint8_t y = (i / WIDTH) + 12;

	// 	hsv.h = i;
	// 	leds[XY(x,y)] = hsv;
	// }

	// leds[XY(0, 20)] = CRGB::DarkGray; // 0xA9A9A9,
 //  	leds[XY(0, 21)] = CRGB::DarkSlateGray; // 0x2F4F4F,
 //  	leds[XY(0, 21)] = CRGB::DimGray; // 0x696969,
 //  	leds[XY(0, 22)] = CRGB::Gray; // 0x808080,
 //  	leds[XY(0, 23)] = CRGB::LightSlateGray; // 0x778899,
 //  	leds[XY(0, 24)] = CRGB::SlateGray; // 0x708090,

	while(1) {
		for(uint16_t i = 1; i < 256; i++){
			FastLED.setBrightness(i);
			FastLED.show();
			FastLED.delay(100);
		}
		for(uint16_t j = 255; j > 0; j++){
			FastLED.setBrightness(j);
			FastLED.show();
			FastLED.delay(100);
		}		
	}
}

void test_sparkles() {
	FastLED.clear(1);
	// for(uint16_t i = 0; i < NUM_LEDS; i++ ){
	// 	leds[i] = CRGB::Black;
	// }

	add_sparkles();
	FastLED.show(); //display this frame
	FastLED.delay(2 * 1000 / FPS);
}

void off(uint8_t secs) {
	for(uint16_t i = 0; i < NUM_LEDS; i++ ){
		leds[i] = CRGB::Black;
	}

	FastLED.show();
	FastLED.delay(1000 * secs);
}

void test_correction(){
	show_rgb();
	FastLED.setCorrection( TypicalLEDStrip );	
	FastLED.delay(4*1000);
	off(4);
	show_rgb();
	FastLED.setCorrection( UncorrectedColor );
	FastLED.delay(4*1000);
	off(4);
}

void test_brightness(){
	show_rgb();
	for(uint16_t i = 0; i < 255; i++){
		FastLED.setBrightness( i );
		FastLED.show(); // display this frame
		FastLED.delay(1000 / FPS);
	}
}

#define TEMPERATURE_1 Tungsten100W
#define TEMPERATURE_2 OvercastSky

// How many seconds to show each temperature before switching
#define DISPLAYTIME 20
// How many seconds to show black between switches
#define BLACKTIME   3

// void test_rainbow() {
	
// 	fill_rainbow(&leds[XY(23, 0)], HEIGHT, 0, 1);
// 	fill_rainbow_reverse(&leds[XY(col,HEIGHT-1)], HEIGHT, 0, 1);	


// }


void test_temperature(){
	// draw a generic, no-name rainbow
	static uint8_t starthue = 0;

	for(uint8_t col = 0; col < 10; col++){		
		if(col%2 == 0) {
			fill_rainbow( &leds[XY(col,0)], HEIGHT, starthue, 20);		
		} else {
			fill_rainbow_reverse( &leds[XY(col,HEIGHT-1)], HEIGHT, starthue, 20);	
		}		
	}	
	--starthue;

	// Choose which 'color temperature' profile to enable.
	uint8_t secs = (millis() / 1000) % (DISPLAYTIME * 2);
	if( secs < DISPLAYTIME) {
		FastLED.setTemperature( TEMPERATURE_1 ); // first temperature
		leds[0] = TEMPERATURE_1; // show indicator pixel
	} else {
		FastLED.setTemperature( TEMPERATURE_2 ); // second temperature
		leds[0] = TEMPERATURE_2; // show indicator pixel
	}

	// Black out the LEDs for a few secnds between color changes
	// to let the eyes and brains adjust
	if( (secs % DISPLAYTIME) < BLACKTIME) {
		memset8( leds, 0, NUM_LEDS * sizeof(CRGB));
	}

	FastLED.show();
	FastLED.delay(20);
}