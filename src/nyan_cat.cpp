#include "vest.h"
#include "gifs.h"

GifByteType nyan_cat_bytes[] = 
{
	0x47,0x49,0x46,0x38,0x39,0x61,0x18,0x00,0x10,0x00,0xf3,0x00,0x00,0x1a,0x1a,0x1a,
	0xff,0x00,0x00,0x66,0x33,0xff,0xff,0x33,0x99,0x00,0x99,0xff,0x99,0x99,0x99,0xff,
	0x99,0x00,0xff,0x99,0x99,0xff,0x99,0xff,0x33,0xff,0x00,0xff,0xcc,0x99,0xf7,0xf7,
	0xf7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0xff,0x0b,
	0x4e,0x45,0x54,0x53,0x43,0x41,0x50,0x45,0x32,0x2e,0x30,0x03,0x01,0x00,0x00,0x00,
	0x21,0xfe,0x16,0x43,0x72,0x6f,0x70,0x70,0x65,0x64,0x20,0x77,0x69,0x74,0x68,0x20,
	0x65,0x7a,0x67,0x69,0x66,0x2e,0x63,0x6f,0x6d,0x00,0x21,0xf9,0x04,0x09,0x0a,0x00,
	0x09,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,0x04,0x6f,0x30,0xc9,
	0x49,0xab,0xbd,0x12,0xe8,0xcd,0x37,0xce,0x4a,0x28,0x2a,0xda,0x08,0x24,0x5a,0x05,
	0x84,0x48,0xeb,0x02,0x05,0xd0,0x86,0xf0,0x09,0x04,0xc1,0xaa,0xb8,0x3c,0x1c,0x6f,
	0x85,0x58,0x22,0x66,0x58,0xb9,0x06,0xbd,0xa0,0x52,0x79,0x0a,0x96,0x78,0xaf,0xe5,
	0x02,0x36,0xfd,0x39,0x77,0x50,0x84,0xcf,0x59,0xab,0x11,0x36,0x58,0x64,0x74,0x49,
	0x06,0x08,0xce,0xc6,0xac,0xef,0x70,0xa8,0xc5,0xda,0x13,0xdd,0xb1,0xb5,0x6e,0x73,
	0xe0,0x71,0x16,0x74,0x5b,0xb6,0xe8,0x46,0x34,0x1d,0x29,0x2a,0x3f,0x82,0x82,0x18,
	0x3e,0x89,0x19,0x4e,0x4e,0x1f,0x29,0x83,0x19,0x36,0x27,0x14,0x11,0x00,0x21,0xf9,
	0x04,0x09,0x0a,0x00,0x04,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,
	0x04,0x6d,0x90,0xc8,0x49,0xab,0xbd,0x12,0xe8,0xcd,0x37,0xce,0x4a,0x28,0x2a,0xda,
	0x08,0x10,0x5a,0x05,0x84,0x48,0xeb,0x02,0x05,0xd0,0x86,0xf0,0x19,0xdc,0xab,0xe2,
	0xee,0x70,0xbc,0x15,0x31,0x82,0x61,0xb8,0x72,0x0d,0x78,0xc0,0x64,0xf2,0xc4,0xd1,
	0xed,0x5a,0x3d,0xe0,0x02,0x36,0x8d,0x2d,0x9d,0xcf,0xa8,0x6f,0xdb,0x71,0x1e,0x5f,
	0xca,0x70,0x4c,0x40,0x2e,0x3e,0x11,0xbd,0xc3,0xa1,0x16,0x5b,0x4f,0x72,0x46,0x28,
	0x50,0xdd,0x71,0xbf,0x59,0x59,0x31,0xf0,0xa4,0x1a,0x99,0x3a,0x29,0x16,0x80,0x83,
	0x35,0x18,0x3d,0x87,0x19,0x7b,0x7b,0x1f,0x29,0x81,0x19,0x4c,0x7c,0x12,0x11,0x00,
	0x21,0xf9,0x04,0x09,0x0a,0x00,0x06,0x00,0x2c,0x00,0x00,0x00,0x00,0x18,0x00,0x10,
	0x00,0x00,0x04,0x72,0xd0,0xc8,0x09,0xaa,0xbd,0x76,0x6a,0xaa,0xba,0x57,0xd5,0x07,
	0x18,0xd5,0x06,0x74,0x48,0xaa,0x02,0x05,0x90,0x76,0xec,0xc8,0x29,0x6a,0xcd,0xb6,
	0x56,0xd1,0x6a,0xa7,0x3a,0xd8,0xba,0x60,0x70,0x14,0xb0,0xd0,0x6a,0xa9,0x9b,0x6e,
	0xc1,0x62,0xe2,0x74,0x3d,0x24,0x42,0xf9,0xac,0xb4,0xa0,0xd1,0xdf,0x4a,0xc8,0xbd,
	0x02,0x12,0x51,0xe4,0xed,0x70,0x88,0xb5,0xca,0x00,0x02,0xe1,0x74,0x44,0x68,0xc7,
	0x68,0x4b,0x59,0x40,0x27,0xa1,0xc4,0x5d,0xe8,0xc6,0xfe,0xf1,0x60,0x32,0x7b,0x24,
	0x7f,0x83,0x81,0x12,0x37,0x87,0x86,0x50,0x7a,0x81,0x87,0x8b,0x8d,0x3b,0x85,0x25,
	0x25,0x14,0x23,0x93,0x12,0x11,0x00,0x21,0xf9,0x04,0x01,0x0a,0x00,0x01,0x00,0x2c,
	0x00,0x00,0x00,0x00,0x18,0x00,0x10,0x00,0x00,0x04,0x70,0x30,0xc8,0x09,0xaa,0xbd,
	0x76,0x6a,0xaa,0xba,0x57,0xd5,0x07,0x04,0xd5,0x06,0x74,0x48,0xaa,0x02,0x05,0x90,
	0x76,0xec,0xc8,0x29,0x6a,0xcd,0xb6,0x56,0xd1,0x6a,0xa7,0x3a,0xd8,0xba,0x60,0x70,
	0x74,0xa1,0xd5,0x52,0x37,0xdd,0x82,0xb5,0x6c,0x0d,0x8d,0xc7,0x24,0x6e,0x8a,0x31,
	0xfe,0x56,0xc2,0x6c,0x2b,0xc1,0xed,0x1d,0x11,0xb7,0xc3,0x21,0xd6,0x1a,0x13,0xce,
	0x27,0xe8,0x35,0x3c,0xbe,0x8c,0x05,0x70,0x12,0x2a,0xaa,0xd5,0xc9,0x78,0x1f,0x11,
	0xa6,0xb4,0x21,0xed,0xff,0x7d,0x14,0x76,0x76,0x12,0x37,0x86,0x81,0x24,0x83,0x3b,
	0x89,0x4e,0x8b,0x81,0x25,0x7c,0x85,0x44,0x77,0x12,0x11,0x00,0x3b
};

extern CRGB leds[NUM_LEDS];

static void nyan_loop() {
	FastLED.show();
	while(1){		
		FastLED.delay(1000);
		// FastLED.delay(1000 / FPS);	
	}
}

void nyan_cat()
{

	GifLiteral nyan_cat = {
		.bytes = nyan_cat_bytes,
		.size = sizeof(nyan_cat_bytes),
		.cursor = 0
	};

	int Error;
	GifFileType* gifFile = DGifOpen(&nyan_cat, read_gif_literal, &Error);
	if(gifFile == NULL){		
		leds[0] = CRGB::Red;
		nyan_loop();
	}
	Error = DGifSlurp(gifFile);

	if(Error != GIF_OK){
		leds[(uint8_t)Error] = CRGB::Red;
		nyan_loop();
	}

	while(1) {

		for(uint8_t i = 0; i < gifFile->ImageCount; i++){

			SavedImage* img = &gifFile->SavedImages[i];
			if(img == NULL){
				leds[2] = CRGB::Red;
				nyan_loop();
			}

			GifColorType* colors = img->ImageDesc.ColorMap->Colors;
			uint16_t num_pixels = img->ImageDesc.Width * img->ImageDesc.Height;

			for(uint16_t p = 0; p < num_pixels; p++)
			{
				uint16_t pixel = img->RasterBits[p];
				if(pixel >= img->ImageDesc.ColorMap->ColorCount) {       //Pixel is outside pallette range		
					leds[R(p)] = CRGB::White;
				} else {
					GifColorType c = colors[pixel];
					leds[R(p)] = CRGB(c.Red,c.Green,c.Blue);
				}
			}

			FastLED.show();
			FastLED.delay(250);

		}	
	
	}
}

